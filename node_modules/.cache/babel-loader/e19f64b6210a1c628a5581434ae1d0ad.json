{"ast":null,"code":"var _jsxFileName = \"/Users/TB/Thinkful/practice-with-vscode/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport DurationHandler from \"../duration-handler/DurationHandler\";\nimport MediaHandler from \"../media-handler/MediaHandler\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  _s();\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [progressMax, setProgressMax] = useState(0);\n  const [progress, setProgress] = useState(0);\n  useInterval(() => {\n    setProgress(secondsScaled(progressMax - session.timeRemaining));\n    setProgressMax(session.label === \"Focusing\" ? focusDuration * 60 : breakDuration * 60);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n  * Called whenever the play/pause button is clicked.\n  */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function stopButton() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  function secondsScaled(remaining) {\n    return 100 - (progressMax - remaining) / progressMax * 100;\n  }\n\n  function focusHandler(focus) {\n    focus === \"decrease\" ? setFocusDuration(Math.max(focusDuration - 5, 5)) : setFocusDuration(Math.min(focusDuration + 5, 60));\n  }\n\n  function breakHandler(word) {\n    word === \"decrease\" ? setBreakDuration(Math.max(breakDuration - 1, 1)) : setBreakDuration(Math.min(breakDuration + 1, 15));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(DurationHandler, {\n      focusHandler: focusHandler,\n      breakHandler: breakHandler,\n      focusDuration: focusDuration,\n      breakDuration: breakDuration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MediaHandler, {\n      playPause: playPause,\n      stopButton: stopButton,\n      isTimerRunning: isTimerRunning,\n      session: session\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [session !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            \"data-testid\": \"session-title\",\n            children: [session === null || session === void 0 ? void 0 : session.label, \" for \", minutesToDuration(session.label === \"Focusing\" ? focusDuration : breakDuration), \" minutes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"lead\",\n            \"data-testid\": \"session-sub-title\",\n            children: [secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress\",\n            style: {\n              height: \"20px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              role: \"progressbar\",\n              \"aria-valuemin\": \"0\",\n              \"aria-valuemax\": \"100\",\n              \"aria-valuenow\": progress.toString(),\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pomodoro, \"BN8Pog1d1b9sQY5DW+09Ou619fM=\", false, function () {\n  return [useInterval];\n});\n\n_c = Pomodoro;\nexport default Pomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"sources":["/Users/TB/Thinkful/practice-with-vscode/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","DurationHandler","MediaHandler","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","progressMax","setProgressMax","progress","setProgress","secondsScaled","Audio","play","playPause","nextState","prevStateSession","stopButton","remaining","focusHandler","focus","min","breakHandler","word","height","toString","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration} from \"../utils/duration\";\nimport {secondsToDuration} from \"../utils/duration\";\nimport DurationHandler from \"../duration-handler/DurationHandler\";\nimport MediaHandler from \"../media-handler/MediaHandler\";\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n    // Timer starts out paused\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    // // The current session - null where there is no session running\n    const [session, setSession] = useState(null);\n    const [focusDuration, setFocusDuration] = useState(25);\n    const [breakDuration, setBreakDuration] = useState(5);\n    const [progressMax, setProgressMax] = useState(0);\n    const [progress, setProgress] = useState(0);\n\n    useInterval(\n        () => {\n            setProgress(secondsScaled(progressMax - session.timeRemaining));\n            setProgressMax(\n                (session.label === \"Focusing\") ? (focusDuration * 60) : (breakDuration * 60)\n            );\n\n            if (session.timeRemaining === 0) {\n                new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n                return setSession(nextSession(focusDuration, breakDuration));\n            }\n            return setSession(nextTick);\n        },\n        isTimerRunning ? 1000 : null\n    );\n\n    /**\n    * Called whenever the play/pause button is clicked.\n    */\n    function playPause() {\n        setIsTimerRunning((prevState) => {\n            const nextState = !prevState;\n            if (nextState) {\n                setSession((prevStateSession) => {\n                    // If the timer is starting and the previous session is null,\n                    // start a focusing session.\n                    if (prevStateSession === null) {\n                        return {\n                            label: \"Focusing\",\n                            timeRemaining: focusDuration * 60,\n                        };\n                    }\n                    return prevStateSession;\n                });\n            }\n            return nextState;\n        });\n    }\n\n\n    function stopButton() {\n        setIsTimerRunning(false);\n        setSession(null);\n    }\n\n    function secondsScaled(remaining) {\n        return 100 - (progressMax - remaining) / (progressMax) * 100\n    }\n\n    function focusHandler(focus) {\n        (focus === \"decrease\") ? setFocusDuration(Math.max(focusDuration - 5, 5)) : setFocusDuration(Math.min(focusDuration + 5, 60))\n    }\n\n    function breakHandler(word) {\n        (word === \"decrease\") ? setBreakDuration(Math.max(breakDuration - 1, 1)) : setBreakDuration(Math.min(breakDuration + 1, 15))\n    }\n\n  return (\n    <div className=\"pomodoro\">\n        <DurationHandler\n            focusHandler={focusHandler}\n            breakHandler={breakHandler}\n            focusDuration={focusDuration}\n            breakDuration={breakDuration}\n        />\n\n        <MediaHandler\n            playPause={playPause}\n            stopButton={stopButton}\n            isTimerRunning={isTimerRunning}\n            session={session}\n        />\n\n      <div>\n        {(session !== null) &&\n            <div className=\"row mb-2\">\n              <div className=\"col\">\n                <h2 data-testid=\"session-title\">\n                  {session?.label} for {minutesToDuration(\n                    (session.label === \"Focusing\") ? (focusDuration) : (breakDuration)\n                  )} minutes\n                </h2>\n                <p className=\"lead\" data-testid=\"session-sub-title\">\n                  {secondsToDuration(session?.timeRemaining)} remaining\n                </p>\n              </div>\n            </div>}\n\n\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div\n              className=\"progress\"\n              style={{\n                height: \"20px\",\n              }}\n            >\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progress.toString()}\n                style={{ width: `${progress}%` }}\n\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}